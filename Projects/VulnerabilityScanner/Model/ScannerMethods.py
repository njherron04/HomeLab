import socket
import ipaddress
import concurrent.futures
from typing import List, Dict

class TCPScanner:
    def __init__(self, host: str, ports: List[int]):
        self.host = host
        self.ports = ports
        self.results = Dict[int, bool] = {} #{port could be true or false}


#Controller for the scanner, loops through the list of ports given. 
#For each port, it calls upon scan_port(port) to do the actual check.
#Stores the results in the results dictionary.
#RETURNS - An updated dictionary (results)
    def scan_host(self):
        for i in self.ports:
            result = self.scan_port(i)
            if result:
                self.results[i] = True
            else:
                self.results[i] = False


#Checks the port given and returns if port is open or closed.
    def scan_port(self, port: int) -> bool:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(0.5) #timeout awaiting connection
        try:
            result = s.connect_ex((self.host, port)) # 0 results in success, (open)
            return result == 0
        except (socket.timeout, socket.gaierror, OSError):
            return False
        finally:
            try:
                s.close
            except Exception:
                pass

#Shows a dictionary of ports and if they are open or closed.
    def get_results(self) -> Dict[int, bool]:

        return self.results






